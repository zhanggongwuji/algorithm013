/**
 *https://leetcode-cn.com/problems/first-unique-character-in-a-string/
 * 387. 字符串中的第一个唯一字符
 * 给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。
 *
 *
 *
 * 示例：
 *
 * s = "leetcode"
 * 返回 0
 *
 * s = "loveleetcode"
 * 返回 2
 *
 *
 * 提示：你可以假定该字符串只包含小写字母。
 * 复杂度分析
 *
 * 时间复杂度： O(N)O(N)
 * 只遍历了两遍字符串，同时散列表中查找操作是常数时间复杂度的。
 *
 * 空间复杂度： O(N)O(N)
 * 用到了散列表来存储字符串中每个元素出现的次数。
 */
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> count = new HashMap<Character, Integer>();
        int n = s.length();
        // build hash map : character and how often it appears
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            count.put(c, count.getOrDefault(c, 0) + 1);
        }

        // find the index
        for (int i = 0; i < n; i++) {
            if (count.get(s.charAt(i)) == 1)
                return i;
        }
        return -1;
    }
}
class Solution{
    public int firstUniqChar(String s){
        int[] count=new int[26];
        char[] array=s.toCharArray();
        for(char c:array){
            count[c-'a']++
        }
        for (int i=0;i<s.length();i++){
            if(count[array[i]-'a']==1){
                return i;
            }
        }
        return -1;

    }
}